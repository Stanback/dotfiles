#!/usr/bin/env bash
set -euo pipefail

# Ensure standard PATH for commands
export PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$PATH"

# --- Settings ---------------------------------------------------------------
REPO="${REPO:-$HOME/dotfiles}"
TS="$(date +%Y%m%d-%H%M%S)"
BACKUP_SUFFIX=".$TS.bak"
DRY_RUN="${DRY_RUN:-no}"

SHELL_CONFIG_DIR="$HOME/.config/shell"
SECRETS_FILE="$SHELL_CONFIG_DIR/secrets.zsh"
SECRETS_EXAMPLE="$REPO/config/shell/secrets.zsh.example"
LOCAL_FILE="$SHELL_CONFIG_DIR/local.zsh"
LOCAL_EXAMPLE="$REPO/config/shell/local.zsh.example"
GIT_CONFIG_LOCAL="$HOME/.gitconfig.local"
GIT_CONFIG_LOCAL_EXAMPLE="$REPO/git/.gitconfig.local.example"
SSH_CONFIG_LOCAL="$HOME/.ssh/config.local"
SSH_CONFIG_LOCAL_EXAMPLE="$REPO/ssh/config.local.example"

# Installation directories
OMZ_DIR="$HOME/.oh-my-zsh"
P10K_DIR="$HOME/powerlevel10k"
NVIM_CONFIG_DIR="$HOME/.config/nvim"
NVIM_PLUGINS_DIR="$HOME/.config/nvim/lua/plugins"
GHOSTTY_CONFIG_DIR="$HOME/.config/ghostty"
BTOP_CONFIG_DIR="$HOME/.config/btop"

# Update behavior (set UPDATE_TOOLS=yes to pull latest versions)
UPDATE_TOOLS="${UPDATE_TOOLS:-no}"

# Files/dirs to link: target_path -> repo_relative_path
# Add/remove as you like.
declare -A LINKS
LINKS[$HOME/.zprofile]="$REPO/zsh/.zprofile"
LINKS[$HOME/.zshrc]="$REPO/zsh/.zshrc"
LINKS[$HOME/.p10k.zsh]="$REPO/p10k/.p10k.zsh"
LINKS[$HOME/.ssh/config]="$REPO/ssh/config"
LINKS[$HOME/.gitconfig]="$REPO/git/.gitconfig"
LINKS[$GHOSTTY_CONFIG_DIR]="$REPO/config/ghostty"
LINKS[$BTOP_CONFIG_DIR]="$REPO/config/btop"
LINKS[$NVIM_PLUGINS_DIR/rose-pine.lua]="$REPO/config/nvim/lua/plugins/rose-pine.lua"

# --- Helpers ----------------------------------------------------------------
need_cmd() { command -v "$1" >/dev/null 2>&1 || { echo "Missing: $1"; exit 1; }; }

check_dependencies() {
  local missing=()
  local deps=(git curl zsh)

  for cmd in "${deps[@]}"; do
    command -v "$cmd" >/dev/null 2>&1 || missing+=("$cmd")
  done

  if [[ ${#missing[@]} -gt 0 ]]; then
    echo "ERROR: Missing required dependencies: ${missing[*]}"
    echo ""
    echo "Install missing dependencies:"
    for cmd in "${missing[@]}"; do
      case "$cmd" in
        git)
          echo "  • git: xcode-select --install (or brew install git)"
          ;;
        curl)
          echo "  • curl: should be pre-installed on macOS"
          ;;
        zsh)
          echo "  • zsh: should be pre-installed on macOS (or brew install zsh)"
          ;;
      esac
    done
    exit 1
  fi
}

same_link_target() {
  local target="$1" src="$2"
  [[ -L "$target" ]] && [[ "$(readlink "$target")" == "$src" ]]
}

backup_if_exists() {
  local path="$1"
  if [[ -e "$path" || -L "$path" ]]; then
    # If it's already the right symlink, no backup needed.
    return 0
  fi
}

backup_path() {
  local path="$1"
  if [[ -e "$path" || -L "$path" ]]; then
    local bak="${path}${BACKUP_SUFFIX}"
    echo "  • Backing up: $path -> $bak"
    [[ "$DRY_RUN" == "yes" ]] || mv -f "$path" "$bak"
  fi
}

link_file() {
  local target="$1" src="$2"
  [[ "$DRY_RUN" == "yes" ]] || mkdir -p "$(dirname "$target")"
  if same_link_target "$target" "$src"; then
    echo "  • OK (linked already): $target"
  else
    if [[ -e "$target" || -L "$target" ]]; then
      backup_path "$target"
    fi
    if [[ "$DRY_RUN" == "yes" ]]; then
      echo "  • Would link: $target -> $src"
    else
      ln -s "$src" "$target"
      echo "  • Linked: $target -> $src"
    fi
  fi
}

# --- Preflight --------------------------------------------------------------
if [[ "$DRY_RUN" == "yes" ]]; then
  echo "==> Dotfiles bootstrap (DRY RUN - no changes will be made)"
else
  echo "==> Dotfiles bootstrap"
fi

# Check dependencies
check_dependencies

[[ -d "$REPO" ]] || { echo "Repo not found at $REPO"; exit 1; }
[[ -f "$REPO/zsh/.zshrc" ]] || { echo "Expected $REPO/zsh/.zshrc"; exit 1; }

# --- Install Oh My Zsh ------------------------------------------------------
if [[ ! -d "$OMZ_DIR" ]]; then
  echo "==> Installing Oh My Zsh (KEEP_ZSHRC)"
  if [[ "$DRY_RUN" == "yes" ]]; then
    echo "  • Would install Oh My Zsh to $OMZ_DIR"
  else
    RUNZSH=no CHSH=no KEEP_ZSHRC=yes \
      sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    echo "  ✓ Oh My Zsh installed"
  fi
else
  echo "==> Oh My Zsh detected"
  if [[ "$UPDATE_TOOLS" == "yes" ]]; then
    if [[ "$DRY_RUN" == "yes" ]]; then
      echo "  • Would update Oh My Zsh"
    else
      echo "  • Updating Oh My Zsh..."
      (cd "$OMZ_DIR" && git pull --quiet)
      echo "  ✓ Updated"
    fi
  else
    echo "  • Skipping update (set UPDATE_TOOLS=yes to update)"
  fi
fi

# --- Install Powerlevel10k theme --------------------------------------------
if [[ ! -d "$P10K_DIR" ]]; then
  echo "==> Installing Powerlevel10k theme"
  if [[ "$DRY_RUN" == "yes" ]]; then
    echo "  • Would install Powerlevel10k to $P10K_DIR"
  else
    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "$P10K_DIR"
    echo "  ✓ Powerlevel10k installed"
  fi
else
  echo "==> Powerlevel10k detected"
  if [[ "$UPDATE_TOOLS" == "yes" ]]; then
    if [[ "$DRY_RUN" == "yes" ]]; then
      echo "  • Would update Powerlevel10k"
    else
      echo "  • Updating Powerlevel10k..."
      (cd "$P10K_DIR" && git pull --quiet)
      echo "  ✓ Updated"
    fi
  else
    echo "  • Skipping update (set UPDATE_TOOLS=yes to update)"
  fi
fi

# --- Install LazyVim --------------------------------------------------------
if [[ ! -d "$NVIM_CONFIG_DIR" ]]; then
  echo "==> Installing LazyVim"

  # Check if nvim is installed
  if ! command -v nvim >/dev/null 2>&1; then
    echo "  ⚠ Neovim not found. Install with: brew install neovim"
    echo "  • Skipping LazyVim installation"
  else
    if [[ "$DRY_RUN" == "yes" ]]; then
      echo "  • Would install LazyVim to $NVIM_CONFIG_DIR"
    else
      # Backup existing Neovim config if it exists
      if [[ -e "$HOME/.config/nvim" || -L "$HOME/.config/nvim" ]]; then
        backup_path "$HOME/.config/nvim"
      fi

      # Clone LazyVim starter
      git clone https://github.com/LazyVim/starter "$NVIM_CONFIG_DIR"

      # Remove .git directory so it doesn't interfere with your dotfiles repo
      rm -rf "$NVIM_CONFIG_DIR/.git"

      echo "  ✓ LazyVim installed"
      echo "  • Run 'nvim' to complete installation (plugins will auto-install)"
    fi
  fi
else
  echo "==> Neovim config detected at $NVIM_CONFIG_DIR"
  echo "  • Skipping LazyVim installation (config already exists)"
  echo "  • To reinstall LazyVim, backup and remove $NVIM_CONFIG_DIR first"
fi

# --- Local config files -----------------------------------------------------
echo "==> Ensuring local config files"

# Create shell config directory
[[ "$DRY_RUN" == "yes" ]] || mkdir -p "$SHELL_CONFIG_DIR"

# Secrets file
if [[ ! -f "$SECRETS_FILE" ]]; then
  if [[ -f "$SECRETS_EXAMPLE" ]]; then
    if [[ "$DRY_RUN" == "yes" ]]; then
      echo "  • Would create $SECRETS_FILE (from example)"
    else
      cp "$SECRETS_EXAMPLE" "$SECRETS_FILE"
      chmod 600 "$SECRETS_FILE"
      echo "  • Created $SECRETS_FILE (from example). Fill in your keys."
    fi
  else
    if [[ "$DRY_RUN" == "yes" ]]; then
      echo "  • Would create blank $SECRETS_FILE"
    else
      : > "$SECRETS_FILE"
      chmod 600 "$SECRETS_FILE"
      echo "  • Created blank $SECRETS_FILE. Fill in your keys."
    fi
  fi
else
  echo "  • Secrets file already exists (will not overwrite)"
  [[ "$DRY_RUN" == "yes" ]] || chmod 600 "$SECRETS_FILE" 2>/dev/null || true
fi

# Local config file
if [[ ! -f "$LOCAL_FILE" ]]; then
  if [[ -f "$LOCAL_EXAMPLE" ]]; then
    if [[ "$DRY_RUN" == "yes" ]]; then
      echo "  • Would create $LOCAL_FILE (from example)"
    else
      cp "$LOCAL_EXAMPLE" "$LOCAL_FILE"
      chmod 600 "$LOCAL_FILE"
      echo "  • Created $LOCAL_FILE (from example). Customize as needed."
    fi
  fi
else
  echo "  • Local config already exists (will not overwrite)"
  [[ "$DRY_RUN" == "yes" ]] || chmod 600 "$LOCAL_FILE" 2>/dev/null || true
fi

# Git local config
if [[ ! -f "$GIT_CONFIG_LOCAL" ]]; then
  if [[ -f "$GIT_CONFIG_LOCAL_EXAMPLE" ]]; then
    if [[ "$DRY_RUN" == "yes" ]]; then
      echo "  • Would create $GIT_CONFIG_LOCAL (from example)"
    else
      cp "$GIT_CONFIG_LOCAL_EXAMPLE" "$GIT_CONFIG_LOCAL"
      echo "  • Created $GIT_CONFIG_LOCAL (from example). Fill in your name/email."
    fi
  fi
else
  echo "  • Git local config already exists (will not overwrite)"
fi

# SSH local config (optional)
if [[ ! -f "$SSH_CONFIG_LOCAL" ]]; then
  if [[ -f "$SSH_CONFIG_LOCAL_EXAMPLE" ]]; then
    echo "  • SSH config.local not found. Create from example if needed:"
    echo "    cp $SSH_CONFIG_LOCAL_EXAMPLE $SSH_CONFIG_LOCAL"
  fi
else
  echo "  • SSH local config already exists"
  [[ "$DRY_RUN" == "yes" ]] || chmod 600 "$SSH_CONFIG_LOCAL" 2>/dev/null || true
fi

# --- Symlinks ---------------------------------------------------------------
echo "==> Linking files"
for target in "${!LINKS[@]}"; do
  src="${LINKS[$target]}"
  if [[ -e "$src" || -L "$src" ]]; then
    link_file "$target" "$src"
  else
    echo "  • Skipped (missing source): $src"
  fi
done

# --- Git Hooks --------------------------------------------------------------
echo "==> Setting up Git hooks"

# Check if pre-commit framework is installed and config exists
if command -v pre-commit >/dev/null 2>&1 && [[ -f "$REPO/.pre-commit-config.yaml" ]]; then
  echo "  • Installing pre-commit hooks (framework)"
  if [[ "$DRY_RUN" == "yes" ]]; then
    echo "    Would run: pre-commit install"
  else
    cd "$REPO" && pre-commit install
    echo "  ✓ Pre-commit framework hooks installed"
    echo "  • Run 'pre-commit run --all-files' to check existing files"
  fi
elif [[ -f "$REPO/.pre-commit-config.yaml" ]]; then
  echo "  ⚠ Pre-commit config found but pre-commit is not installed"
  echo "    Install with: brew install pre-commit"
  echo "    Then run: pre-commit install"
fi

# Legacy: Link standalone pre-commit hook if it exists
if [[ -f "$REPO/git/hooks/pre-commit" ]]; then
  GIT_HOOK_TARGET="$REPO/.git/hooks/pre-commit"
  GIT_HOOK_SRC="$REPO/git/hooks/pre-commit"

  if [[ "$DRY_RUN" == "yes" ]]; then
    echo "  • Would link pre-commit hook"
  else
    mkdir -p "$REPO/.git/hooks"
    if [[ -e "$GIT_HOOK_TARGET" || -L "$GIT_HOOK_TARGET" ]]; then
      if same_link_target "$GIT_HOOK_TARGET" "$GIT_HOOK_SRC"; then
        echo "  • Pre-commit hook already linked"
      else
        backup_path "$GIT_HOOK_TARGET"
        ln -s "$GIT_HOOK_SRC" "$GIT_HOOK_TARGET"
        chmod +x "$GIT_HOOK_TARGET"
        echo "  • Linked pre-commit hook"
      fi
    else
      ln -s "$GIT_HOOK_SRC" "$GIT_HOOK_TARGET"
      chmod +x "$GIT_HOOK_TARGET"
      echo "  • Linked pre-commit hook"
    fi
  fi
fi

# --- Optional: Homebrew packages -------------------------------------------
if [[ -f "$REPO/Brewfile" ]]; then
  echo "==> Brewfile found"
  if command -v brew >/dev/null 2>&1; then
    echo -n "Install/update Homebrew packages from Brewfile? (y/N) "
    read -r REPLY
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      echo "==> Installing Homebrew packages..."
      brew bundle install --file="$REPO/Brewfile"

      # Optional: Update existing packages
      echo -n "Update existing packages? (y/N) "
      read -r REPLY
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "  • Updating packages..."
        brew update
        brew upgrade
      fi

      # Optional: Cleanup
      echo -n "Clean up unused packages? (y/N) "
      read -r REPLY
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "  • Cleaning up..."
        brew bundle cleanup --file="$REPO/Brewfile"
        brew cleanup
      fi
    else
      echo "  • Skipped (run 'brew bundle install' in $REPO later)"
    fi
  else
    echo "  • Homebrew not installed. Install from: https://brew.sh"
    echo -n "Install Homebrew now? (y/N) "
    read -r REPLY
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      echo "==> Installing Homebrew..."
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

      # Add Homebrew to PATH for Apple Silicon Macs
      if [[ -f "/opt/homebrew/bin/brew" ]]; then
        eval "$(/opt/homebrew/bin/brew shellenv)"
      fi

      # After installing Homebrew, offer to install packages
      echo -n "Install packages from Brewfile now? (y/N) "
      read -r REPLY
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "==> Installing Homebrew packages..."
        brew bundle install --file="$REPO/Brewfile"
      fi
    else
      echo "  • After installing Homebrew, run: brew bundle install"
    fi
  fi
fi

# --- Optional: verify Nerd Font (quietly) -----------------------------------
if command -v fc-list >/dev/null 2>&1; then
  if ! fc-list | grep -qi "Nerd Font"; then
    echo "==> Tip: install a Nerd Font (e.g., MesloLGS NF or Fira Code NF) for Powerlevel10k symbols."
  fi
fi

# --- Summary ----------------------------------------------------------------
echo ""
echo "==> Bootstrap complete!"
echo ""
echo "Next steps:"
echo "  1. Open a new terminal or run: exec zsh"
echo "  2. Edit config files:"
echo "     - Shell secrets: vi ~/.config/shell/secrets.zsh"
echo "     - Shell local: vi ~/.config/shell/local.zsh"
echo "     - Git user info: vi ~/.gitconfig.local"
echo "     - SSH local hosts (optional): vi ~/.ssh/config.local"
echo "  3. Run neovim to install plugins: nvim"
echo "  4. Restart Ghostty to load new config (or press Cmd+Shift+,)"
echo ""
echo "Tool management:"
echo "  • Update all tools: UPDATE_TOOLS=yes ~/dotfiles/scripts/bootstrap"
echo "  • Update Oh My Zsh: omz update"
echo "  • Update Powerlevel10k: cd ~/powerlevel10k && git pull"
echo "  • Update LazyVim plugins: nvim and run :Lazy sync"
echo "  • Reload Ghostty config: Cmd+Shift+, (or restart Ghostty)"
echo ""
echo "Package management:"
echo "  • Install packages:     brew bundle install"
echo "  • Update Brewfile:      brew bundle dump --force"
echo "  • Cleanup unused:       brew bundle cleanup"
echo "  • Check for issues:     brew doctor"
echo ""
